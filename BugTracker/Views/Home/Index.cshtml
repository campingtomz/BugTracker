
@using BugTracker.ViewModels
@model HomeVM
@using BugTracker.Helpers;
@using Microsoft.AspNet.Identity;
@{ UserRoleHelper roleHelper = new UserRoleHelper();
    ProjectHelper projectHelper = new ProjectHelper();
    UserHelper userHelper = new UserHelper();
    TicketHelper ticketHelper = new TicketHelper();
}
    <div class="container">
        <div class="row p-t-20">
           
            <div class="col-lg-3 col-md-6 projectButton">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-row">
                            <div class="round align-self-center round-success"><i class="ti-files"></i></div>
                            <div class="m-l-10 align-self-center">
                                <h3 class="m-b-0">Projects</h3>
                                <h5 class="text-muted m-b-0">@Model.ProjectIds.Count</h5>
                            </div>
                        </div>
                        
                    </div>
                </div>
            </div>
            
            <div class="col-lg-3 col-md-6 ticketButton">
                <div class="card">
                    <div class="card-body">
                        <!-- Row -->
                        <div class="d-flex flex-row">
                            <div class="round align-self-center round-info"><i class=" ti-ticket"></i></div>
                            <div class="m-l-10 align-self-center">
                                <h3 class="m-b-0">@Model.TicketsCount</h3>
                                <h5 class="text-muted m-b-0">Tickets </h5>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Column -->
            <div class="col-lg-3 col-md-6 notificationButton">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-row">
                            <div class="round align-self-center round-warning"><i class="ti-announcement"></i></div>
                            <div class="m-l-10 align-self-center">
                                <h3 class="m-b-0">@Model.TotalNotificationsCount</h3>
                                <h5 class="text-muted m-b-0">Notifications </h5>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Column -->
            <div class="col-lg-3 col-md-6 UserButton">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-row">
                            <div class="round align-self-center round-danger"><i class="ti-user"></i></div>
                            <div class="m-l-10 align-self-center">
                                <h3 class="m-b-0">Users</h3>
                                <h5 class="text-muted m-b-0">@Model.UsersCount </h5>
                            </div>
                        </div>                        
                    </div>
                </div>
            </div>
        </div>
        <div class="row NotificationDisplay " style="display:none">
            <div class="notifications">
                <div class="card card-default">
                    <div class="card-body">
                        <h4 class="card-title">Notifications</h4>
                        <h5 class="text-muted noNotificationsDisplay m-b-0">No new Notifications</h5>
                        <div class="comment-widgets m-b-20">
                            <div class="notificationListBox chat-box b-all">
                                <ul class="notificationList chat-list">
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row userTableDisplay">
            <div class="card card-default">

                <div class="card-body">
                    <h4 class="card-title"> Users</h4>
                    <div class="table-responsive ">
                        <table id="UserTable" class="UserTable display nowrap table table-hover table-striped table-bordered" cellspacing="0" width="100%">
                            <thead>
                                <tr>
                                    <th>Full Name</th>
                                    <th>Email</th>
                                    <th>Phone Number</th>
                                    <th>Role</th>
                                    <th># Tickets</th>
                                    <th>View</th>

                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
<div>
    <div class="row ">
        <div class="col-lg-8 col-md-7 tableDisplay">
            <div class="row-12 m-l-40  projectTableDisplay">
                <div class="card card-default">
                    <div class="card-body">
                        <h4 class="card-title">Projects</h4>
                        <div class="table-responsive projectTableDisplayInfo ">
                            <table class="projectTable nowrap table table-hover table-striped table-bordered" cellspacing="0" width="100%">
                                <thead>
                                    <tr>
                                        <th>Project Name</th>
                                        <th>Project Manager</th>
                                        <th>Project Developers</th>
                                        <th>Project Submitters</th>
                                        <th>View</th>

                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var project in projectHelper.GetProjecstByIds(Model.ProjectIds))
                                    {
                                        var projectManager = projectHelper.ListUserOnProjectInRole(project.Id, "ProjectManager");
                                        var Submitters = projectHelper.ListUserOnProjectInRole(project.Id, "Submitter");
                                        var Developers = projectHelper.ListUserOnProjectInRole(project.Id, "Developer");
                                        <tr id="@project.Id" class="projectRow">
                                            <td>
                                                <a class="form-control-static" href="@Url.Action("Details", "Projects", new { id = project.Id })"> @project.Name</a>
                                            </td>
                                            <td>
                                                @if (projectManager.Count > 0)
                                                {
                                                    foreach (var user in projectManager)
                                                    {
                                                        @user.FullName
                                                    }
                                                }
                                                else
                                                {
                                                    <span>No Project Manager Assigned</span>
                                                }
                                            </td>
                                            <td>
                                                @if (Developers.Count > 0)
                                                {
                                                    <select class="form-control custom-select" tabindex="1">
                                                        @foreach (var user in Developers)
                                                        {
                                                            <option>@user.FullName</option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <span>No Developers Assigned</span>
                                                }
                                            </td>
                                            <td>
                                                @if (Submitters.Count > 0)
                                                {
                                                    <select class="form-control custom-select" tabindex="1">
                                                        @foreach (var user in Submitters)
                                                        {
                                                            <option>@user.FullName</option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <span>No Submitters Assigned</span>
                                                }
                                            </td>
                                            <td>@Html.ActionLink("Details", "Details", new { id = project.Id })</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @*@if (projectHelper.CanCreateProject())
                                {
                                    <div class="row p-t-20">
                                        @Html.ActionLink("Create New", "ProjectWizard", "Projects", null, new { @class = "btn btn-success " })
                                    </div>
                                }*@
                        </div>
                    </div>
                </div>
            </div>

            <div class="row-12 m-l-40 ticketTableDisplay style="display:none"">
                <div class="card card-default">
                    <div class="card-body">
                        <h4 class="card-title"> Tickets</h4>
                        <div class="table-responsive  ticketTableDisplayInfo">
                            <table id="TicketTable" class="TicketTable display nowrap table table-hover table-striped table-bordered" cellspacing="0" width="100%">
                                <thead>
                                    <tr>

                                        <th>Project Name</th>
                                        <th>Ticket Issue</th>
                                        <th>Ticket Submitter</th>
                                        <th>Ticket Developers</th>
                                        <th>View</th>

                                    </tr>
                                </thead>

                            </table>
                            @*@if (ticketHelper.CanCreateTicket())
                                {
                                    <div class="row p-t-20">
                                        @Html.ActionLink("Create New", "Create", "Tickets", null, new { @class = "btn btn-success " })
                                    </div>
                                }*@
                        </div>
                    </div>
                </div>
            </div>
           
            <div class="row-12 m-l-40 ticketInfoDisplay" style="display:none">
                <div class="card card-default">
                    <div class="card-body">
                        <h4 class="card-title"> Ticket Info</h4>
                        <div class="ticketInfo">
                        </div>
                    </div>
                </div>
            </div>

            <div class="row-12 m-l-40 ticketAttachments " style=" display:none">
                <div class="card card-default">
                    <div class="card-body">
                        <h4 class="card-title"> Ticket Attachments</h4>
                        <div class="table-responsive ">
                            <table id="AttachmentTable" class="AttachmentTable display nowrap table table-hover table-striped table-bordered" cellspacing="0" width="100%">
                                <thead>
                                    <tr>
                                        <th>Attachment Name</th>
                                        <th>Attachment Submitter</th>
                                        <th>Description</th>
                                        <th>Upload Date</th>
                                        <th>File</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
           
        </div>
        <div class="col-4  chartCommentSection">
            <div class="row m-r-20 chartSection">
            </div>
            <div class="row commentSection " style="display:none">
                <div class="card card-default">
                    <div class="card-body">
                        <div class="row p-t-20 boarder justify-content-center">
                            <div class="col-12">
                                <div class="comment-widgets m-b-20">
                                    <div class="chat-box b-all">
                                        <ul class="chat-list">
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row p-t-20  justify-content-center">
                            <div class="col-12">
                                <label class="control-label">Add Comment</label>

                                @Html.TextArea("Comment", new { @class = "form-control ticketComment", @rows = "5" })
                                <hr />
                                <button id="btn-submit" class="btn btn-info"> <i class="fa fa-pencil"></i> Add New Comment</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>



@section scripts{


    <script>
        var projectIds = new Array();
        var ticketId;
        $(document).ready(function () {
            $(".userTableDisplay").hide();
            $('.projectTable').DataTable({

                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
            $('.TicketTable').DataTable({

                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
            $('.UserTable').DataTable({

                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
            $('.AttachmentTable').DataTable({

                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
            projectIds = JSON.parse('@Html.Raw(Json.Encode(@Model.ProjectIds))')
            loadCharts(projectIds);
            loadTicketsTable(projectIds);
            loadUserTable(projectIds);

      

        $('#TicketTable').on('click', 'tbody tr td', function () {
            if ($(this).index() == 4) return false;

            var table = $('#TicketTable').DataTable();
            var $row = $(this).parent();
            var data = table.row($row).node().id;
            getTicketInfo(data);
            $(".projectTableDisplay").hide();
            $(".userTableDisplay").hide();
            $(".ticketTableDisplay").hide();
            $(".chartSection").empty();
            $(".NotificationDisplay").hide();
            getTicketComments(data);
            getTicketAttachments(data);
            ticketId = data;



        });
        $('.projectTable').on('click', 'tbody tr td', function () {

            if ($(this).index() == 2 || $(this).index() == 3 || $(this).index() == 4) return false;
            var table = $('.projectTable').DataTable();
            var $row = $(this).parent();
            var data = table.row($row).node().id;
            projectIds = parseInt(data);
            $(".projectTableDisplay").hide();
            $(".NotificationDisplay").hide();

            loadCharts(projectIds);
            loadTicketsTable(projectIds);
            loadUserTable(projectIds);

        });
        $(".projectButton").on("click", function () {
            projectIds = JSON.parse('@Html.Raw(Json.Encode(@Model.ProjectIds))')
            $(".projectTableDisplay").show();
            $(".userTableDisplay").hide();
            $(".ticketTableDisplay").show();
            $(".chartSection").show();
            $(".chartSection").show();
            $(".ticketInfoDisplay").hide();
            $(".ticketInfo").empty();
            $(".ticketAttachments").hide();
            $(".AttachmentTable").empty();
            $(".commentSection").hide();
            $(".NotificationDisplay").hide();

            loadCharts(projectIds);
            loadTicketsTable(projectIds);
            loadUserTable(projectIds);
        });
        $(".ticketButton").on("click", function () {
            projectIds = JSON.parse('@Html.Raw(Json.Encode(@Model.ProjectIds))')
            $(".projectTableDisplay").hide();
            $(".userTableDisplay").hide();
            $(".ticketTableDisplay").show();
            $(".chartSection").show();
            $(".ticketInfoDisplay").hide();
            $(".ticketInfo").empty();
            $(".ticketAttachments").hide();
            $(".AttachmentTable").empty();
            $(".commentSection").hide();
            loadCharts(projectIds);
            loadTicketsTable(projectIds);
            $(".NotificationDisplay").hide();

        });
        $(".UserButton").on("click", function () {
            projectIds = JSON.parse('@Html.Raw(Json.Encode(@Model.ProjectIds))')
            $(".projectTableDisplay").hide();
            $(".userTableDisplay").show();
            $(".ticketTableDisplay").hide();
            $(".chartSection").hide();
            $(".ticketInfoDisplay").hide();
            $(".ticketInfo").empty();
            $(".ticketAttachments").hide();
            $(".AttachmentTable").empty();
            $(".commentSection").hide();
            $(".NotificationDisplay").hide();


            loadUserTable(projectIds);
        });
        $(".notificationButton").on("click", function () {
            projectIds = JSON.parse('@Html.Raw(Json.Encode(@Model.ProjectIds))')
            $(".projectTableDisplay").hide();
            $(".userTableDisplay").hide();
            $(".ticketTableDisplay").hide();
            $(".chartSection").hide();
            $(".chartSection").hide();
            $(".ticketInfoDisplay").hide();
            $(".ticketInfo").empty();
            $(".ticketAttachments").hide();
            $(".AttachmentTable").empty();
            $(".commentSection").hide();
            getUserNotifications();
        });
        $('#btn-submit').on("click", function (e) {
            var url = '@Url.Action("createComment", "HomeTableChart")'
            var comment = $(".ticketComment").val();
            $(".ticketComment").val("");
            $.ajax({
                type: "POST",
                async: false,
                url: url,
                data: JSON.stringify({ 'comment': comment, 'ticketId': ticketId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    getTicketComments(ticketId)
                },
                error: function () {
                    alert("Error while inserting data");
                }
            });


        });
        $(document).on("click",".notificaionClose", function () {
             var url = '@Url.Action("DeleteNotification", "HomeTableChart")'
            var notificationId = $(this).val();
           
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ "notificationId": notificationId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    getUserNotifications(response)
                },
                error: function () {
                    alert("Error while inserting data");
                }
            });


        })
        function LoadTicketByProperty(label, property) {

            if (property =="Priority") {
                var url = '@Url.Action("GetTicketByPriority", "HomeTableChart")';
            } else if (property =="Status") {
                var url = '@Url.Action("GetTicketByStatus", "HomeTableChart")';
            } else if (property =="Type") {
                var url = '@Url.Action("GetTicketByType", "HomeTableChart")';
            }

            loadTicketsTableByProperty(label, url, projectIds);

        };
        function loadCharts(projects) {
            $('.chartSection').empty();
            if (typeof projects != "undefined" && projects != null && projects.length != null && projects.length > 0) {

            
                var ticketCharts = [['Priority', '@Url.Action("GetTicketPriorityData", "HomeTableChart")'], ['Status', '@Url.Action("GetTicketStatusData", "HomeTableChart")'], ['Type', '@Url.Action("GetTicketTypeData", "HomeTableChart")']];

                for (var i = 0; i < ticketCharts.length; i++) {
                    var property = ticketCharts[i][0]
                    var url = ticketCharts[i][1];
                    $.ajax({
                        type: "POST",
                        async: false,
                        url: url,
                        data: JSON.stringify({ 'projectIds': projects }),
                        dataType: 'json',
                        contentType: "application/json; charset=utf-8",
                        success: function (response) {
                            if (typeof response != "undefined" && response != null) {
                                $(".chartSection").append(`<div class="row m-l-40">
                                <div class="card card-default">
                                    <div class="card-body">
                                        <h4 class="m-b-0 "> Ticket ${property}</h4>

                                        <canvas id="${property}" width="350" height="350"></canvas>
                                    </div>
                                </div>
                            </div>`);
                                var ticketChart = document.getElementById(property);
                                var propertyValue = property
                                var colorList = getRandomColorList(response.label.length);
                                var ticketData = {
                                    labels: response.label,
                                    datasets: [{
                                        data: response.data,
                                        backgroundColor: colorList,

                                    },
                                    ],
                                }
                                var options = {
                                    onClick: (evt, item) => {

                                        chart.update()
                                        item[0]._model.outerRadius += 10
                                        LoadTicketByProperty(item[0]['_model'].label, propertyValue)
                                    },
                                }
                                var chart = new Chart(ticketChart, {
                                    type: 'doughnut',
                                    data: ticketData,
                                    options: options,

                                });
                            }
                            else {
                                $(".chartSection").append("No Chart Data Available!");

                            }
                          
                        },
                        error: function () {
                            alert("Error while inserting data");
                        }
                    });
                };
            }
            else {
                $(".chartSection").append("No Chart Data Available!");

            }
        }
        function getRandomColorList(length) {
            var colors = [
                'rgba(238, 198, 67',
                'rgba(20, 20, 20)',
                'rgba(13, 33, 161)',
                'rgba(1, 22, 56)',
                'rgba(150, 2, 0)',
                'rgba(206, 108, 71)',
                'rgba(118, 146, 255)',
                'rgba(27, 44, 193)',
                'rgba(84, 101, 255)',
                'rgba(224, 255, 79)'];
            var colorList = [];
            for (var i = 0; i < length; i++) {
                var random = Math.floor(Math.random() * colors.length);
                while (colorList.includes(colors[random])) {
                     random = Math.floor(Math.random() * colors.length);

                }
                    colorList.push(colors[random])

            }
            return colorList;
        }
        function loadTicketsTableByProperty(label, url, projects) {
            if (typeof projects != "undefined" && projects != null && projects.length != null && projects.length > 0) {

                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'PropertyName': label, 'projectIds': projects }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        if (response != null && response.length > 0) {

                            var table = $('#TicketTable').DataTable();
                            table.clear();
                            response.forEach(function (response) {
                                table.row.add([
                                    response.ProjectName, response.Issue, response.SubmitterName, response.DeveloperName, '<a href="/Tickets/Dashboard/' + response.Id + '" >Details</a>'


                                ]).draw().node().id = response.Id;
                            })

                            $(".ticketTableDisplay").show();
                        }
                        else {
                            $('.projectTableDisplayInfo').empty();
                            $('.projectTableDisplayInfo').append("No data!");

                        }
                    },
                    error: function (response) {

                        alert("Error while inserting data");
                    }
                });
            }
            else {
                $('.projectTableDisplayInfo').empty();
                $('.projectTableDisplayInfo').append("No data!");

            }
        } 
        function loadTicketsTable(projects) {
            if (typeof projects != "undefined" && projects != null && projects.length != null && projects.length > 0) {


                var url = '@Url.Action("GetProjectTickets", "HomeTableChart")'
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'projectIds': projects }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {

                            var table = $('#TicketTable').DataTable();
                            table.clear();
                            response.forEach(function (response) {
                                table.row.add([
                                    response.ProjectName, response.Issue, response.SubmitterName, response.DeveloperName, '<a href="/Tickets/Dashboard/' + response.Id + '" >Details</a>'
                                ]).draw().node().id = response.Id;
                            })


                            $(".ticketTableDisplay").show();
                        
                       
                    },
                    error: function (response) {

                        alert("Error while inserting data");
                    }
                });

         
            }
        };
        function loadUserTable(projects) {
            if (typeof projects != "undefined" && projects != null && projects.length != null && projects.length > 0) {


                var url = '@Url.Action("GetUsersByProjects", "HomeTableChart")'
                $.ajax({
                    type: "POST",
                    url: url,
                    data: JSON.stringify({ 'projectIds': projects }),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        var table = $('#UserTable').DataTable();
                        table.clear();


                        response.forEach(function (response) {
                            table.row.add([
                                '<img src="' + response.AvatarPath + '" alt="user"width="40"class="img-circle" />' + response.FullName, response.Email, response.PhoneNumber, response.UserRole, response.TicketCount, '<a href="/UserManagment/UserProfile/' + response.Id + '" >Details</a>'
                            ]).draw().node().id = response.Id;
                        })
                    },
                    error: function (response) {
                        alert("Error while inserting data");
                    }
                });
            }

        };
        function getTicketInfo(ticketId) {
             var url = '@Url.Action("GetTicketInfo", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'ticketId': ticketId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                        $(".ticketInfo").append(
                            `
                            <div class="row p-t-20">
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label ">Ticket Issue:</label>

                                        <p class="form-control-static">${response.Issue}</p>

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label ">Ticket Description :</label>
                                        <p class="form-control-static">${response.IssueDescription}</p>
                                            </div>
                                </div>
                            </div>
                            <div class="row p-t-20">
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label">Ticket Submitter :</label>
                                        <p class="form-control-static"> ${response.SubmitterName}  </p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <div class="row">
                                            <div class="col-md-12">
                                                <label class="control-label">Ticket Developer :</label>

                                                <p class="form-control-static">${response.DeveloperName}  </p>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <hr />

                            <div class="row p-t-20">
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label ">Ticket Type:</label>
                                        <p class="form-control-static">  ${response.TicketType} </p>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label">Created Date:</label>
                                        <p class="form-control-static"> ${response.Created} </p>
                                    </div>
                                </div>
                            </div>
                            <div class="row p-t-20">
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label">Ticket Priority:</label>

                                        <p class="form-control-static"> ${response.TicketPriority} </p>

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label">Last Update:</label>

                                        <p class="form-control-static"> ${response.Updated} </p>
                                    </div>
                                </div>
                            </div>
                            <div class="row p-t-20">
                                <div class="col-md-6">
                                    <div class="form-group ">
                                        <label class="control-label">Ticket Status:</label>
                                        <p class="form-control-static"> ${response.TicketStatus} </p>

                        </div>`

                        )
                        $(".ticketInfoDisplay").show();
                    
                 
                },
                error: function (response) {
                    alert("Error while inserting data");
                }
            });
        }
        function getTicketComments(ticketId) {
            var url = '@Url.Action("GetTicketComments", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'ticketId': ticketId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    $(".chat-list").empty();

                    if (typeof response != "undefined" && response != null && response.length != null && response.length > 0) {
                        response.forEach(function (response) {
                            $(".chat-list").append(
                                `<li>
                                 <div class="d-flex flex-row comment-row  b-all">
                                 <div class="p-2"><span class="round"><img src=${response.AvatarPath} alt="user" width="50"/></span></div>
                                 <div class="comment-text w-100">
                                 <h5>${response.UserName}</h5>
                                 <div class="comment-footer">
                                 <span class="date">${response.Created}</span>
                                 </div>
                                 <p class="m-b-5 m-t-10">${response.Comment}</p>
                                 </div>
                                 </div>
                             </li>`
                            )
                        })


                    } else {
                        $(".chat-list").append(` <h4 class= "card-title"> No Comments on The Ticket</h4>`)
                    }
                    $(".commentSection").show();
                },
                error: function (response) {
                    alert("Error while inserting data");
                }

            });
        }
        function getTicketAttachments(ticketId) {
            var url = '@Url.Action("GetTicketAttachments", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify({ 'ticketId': ticketId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {


                        var table = $('#AttachmentTable').DataTable();
                        table.clear();
                        response.forEach(function (response) {
                            table.row.add([
                                response.Name, response.Uploader, response.Description, response.Created, response.FilePath
                            ]).draw()
                        })
                   
                    $(".ticketAttachments").show();
                },
                error: function (response) {
                    alert("Error while inserting data");
                }

            });
        }
        function getUserNotifications() {
             var url = '@Url.Action("GetNotification", "HomeTableChart")'
            $.ajax({
                type: "POST",
                url: url,
                //data: JSON.stringify({ 'ticketId': ticketId }),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    $(".notificationList").empty();

                    if (response != null && response.length > 0) { 
                        response.forEach(function (response) {
                            var milli = `${response.Created}`.replace(/\/Date\((-?\d+)\)\//, '$1');
                            var d = new Date(parseInt(milli));
                            var date = ((d.getMonth() > 8) ? (d.getMonth() + 1) : ('0' + (d.getMonth() + 1))) + '/' + ((d.getDate() > 9) ? d.getDate() : ('0' + d.getDate())) + '/' + d.getFullYear();

                            $(".notificationList").append(
                                `<div class="alert alert-${response.NotificationType}">
                                         <h6>${date}</h6>
                                            <button type="button" value="${response.Id}" class="close notificaionClose" data-dismiss="alert" aria-label="Close"> <span aria-hidden="true">&times;</span> </button>
                                            <h3 class="text-${response.NotificationType}"><i class="fa ${response.Icon}"></i> ${response.Subject}</h3> ${response.Message}
                                        </div>`
                            )
                        });
                        $(".noNotificationsDisplay").hide();

                        $('.notificationListBox').show();


                    } else {
                        $('.notificationListBox').hide();
                        $(".noNotificationsDisplay").show();
                    }
                    $(".NotificationDisplay").show();
                },
                error: function (response) {
                    alert("Error while inserting data");
                }

            });
        }
        });
    </script>

}

